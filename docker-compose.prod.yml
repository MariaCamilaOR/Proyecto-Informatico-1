version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: doyouremember-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - doyouremember-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cach√© y sesiones
  redis:
    image: redis:7-alpine
    container_name: doyouremember-redis-prod
    volumes:
      - redis_data_prod:/data
    networks:
      - doyouremember-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ para message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: doyouremember-rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
    networks:
      - doyouremember-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: doyouremember-api-gateway-prod
    environment:
      - NODE_ENV=production
      - GATEWAY_PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PHOTO_SERVICE_URL=http://photo-service:3002
      - ANALYSIS_SERVICE_URL=http://analysis-service:3003
      - REPORT_SERVICE_URL=http://report-service:3004
      - NOTIFICATION_SERVICE_URL=http://notification-service:3005
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: doyouremember-auth-service-prod
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Photo Service
  photo-service:
    build:
      context: ./services/photo-service
      dockerfile: Dockerfile
    container_name: doyouremember-photo-service-prod
    environment:
      - NODE_ENV=production
      - PHOTO_SERVICE_PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - OBJECT_STORAGE_URL=${OBJECT_STORAGE_URL}
      - OBJECT_STORAGE_ACCESS_KEY=${OBJECT_STORAGE_ACCESS_KEY}
      - OBJECT_STORAGE_SECRET_KEY=${OBJECT_STORAGE_SECRET_KEY}
      - OBJECT_STORAGE_BUCKET=${OBJECT_STORAGE_BUCKET}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Analysis Service
  analysis-service:
    build:
      context: ./services/analysis-service
      dockerfile: Dockerfile
    container_name: doyouremember-analysis-service-prod
    environment:
      - NODE_ENV=production
      - ANALYSIS_SERVICE_PORT=3003
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - STT_NLP_SERVICE_URL=${STT_NLP_SERVICE_URL}
      - STT_NLP_API_KEY=${STT_NLP_API_KEY}
      - OBJECT_STORAGE_URL=${OBJECT_STORAGE_URL}
      - OBJECT_STORAGE_ACCESS_KEY=${OBJECT_STORAGE_ACCESS_KEY}
      - OBJECT_STORAGE_SECRET_KEY=${OBJECT_STORAGE_SECRET_KEY}
      - OBJECT_STORAGE_BUCKET=${OBJECT_STORAGE_BUCKET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Report Service
  report-service:
    build:
      context: ./services/report-service
      dockerfile: Dockerfile
    container_name: doyouremember-report-service-prod
    environment:
      - NODE_ENV=production
      - REPORT_SERVICE_PORT=3004
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: doyouremember-notification-service-prod
    environment:
      - NODE_ENV=production
      - NOTIFICATION_SERVICE_PORT=3005
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FCM_SERVER_KEY=${FCM_SERVER_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: doyouremember-frontend-prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    depends_on:
      - api-gateway
    networks:
      - doyouremember-network
    restart: unless-stopped

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: doyouremember-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - doyouremember-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:
  rabbitmq_data_prod:

networks:
  doyouremember-network:
    driver: bridge
