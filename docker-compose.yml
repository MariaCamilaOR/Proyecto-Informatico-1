version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: doyouremember-postgres
    environment:
      POSTGRES_DB: doyouremember
      POSTGRES_USER: doyouremember
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - doyouremember-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U doyouremember -d doyouremember"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cach√© y sesiones
  redis:
    image: redis:7-alpine
    container_name: doyouremember-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - doyouremember-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ para message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: doyouremember-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - doyouremember-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: doyouremember-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - GATEWAY_PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PHOTO_SERVICE_URL=http://photo-service:3002
      - ANALYSIS_SERVICE_URL=http://analysis-service:3003
      - REPORT_SERVICE_URL=http://report-service:3004
      - NOTIFICATION_SERVICE_URL=http://notification-service:3005
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:3003,http://localhost:3004,http://localhost:3005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: doyouremember-auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_PORT=3001
      - DATABASE_URL=postgresql://doyouremember:password@postgres:5432/doyouremember
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=12
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - doyouremember-network
    volumes:
      - ./services/auth-service:/app
      - /app/node_modules

  # Photo Service
  photo-service:
    build:
      context: ./services/photo-service
      dockerfile: Dockerfile
    container_name: doyouremember-photo-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PHOTO_SERVICE_PORT=3002
      - DATABASE_URL=postgresql://doyouremember:password@postgres:5432/doyouremember
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - OBJECT_STORAGE_URL=http://minio:9000
      - OBJECT_STORAGE_ACCESS_KEY=minioadmin
      - OBJECT_STORAGE_SECRET_KEY=minioadmin
      - OBJECT_STORAGE_BUCKET=doyouremember-photos
      - MAX_FILE_SIZE=10485760
      - ALLOWED_FILE_TYPES=image/jpeg,image/png
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - doyouremember-network
    volumes:
      - ./services/photo-service:/app
      - /app/node_modules

  # Analysis Service
  analysis-service:
    build:
      context: ./services/analysis-service
      dockerfile: Dockerfile
    container_name: doyouremember-analysis-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - ANALYSIS_SERVICE_PORT=3003
      - DATABASE_URL=postgresql://doyouremember:password@postgres:5432/doyouremember
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - STT_NLP_SERVICE_URL=https://api.stt-nlp.com/v1
      - STT_NLP_API_KEY=your-stt-nlp-api-key
      - OBJECT_STORAGE_URL=http://minio:9000
      - OBJECT_STORAGE_ACCESS_KEY=minioadmin
      - OBJECT_STORAGE_SECRET_KEY=minioadmin
      - OBJECT_STORAGE_BUCKET=doyouremember-analysis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - doyouremember-network
    volumes:
      - ./services/analysis-service:/app
      - /app/node_modules

  # Report Service
  report-service:
    build:
      context: ./services/report-service
      dockerfile: Dockerfile
    container_name: doyouremember-report-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - REPORT_SERVICE_PORT=3004
      - DATABASE_URL=postgresql://doyouremember:password@postgres:5432/doyouremember
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    volumes:
      - ./services/report-service:/app
      - /app/node_modules

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: doyouremember-notification-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - NOTIFICATION_SERVICE_PORT=3005
      - DATABASE_URL=postgresql://doyouremember:password@postgres:5432/doyouremember
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
      - FCM_SERVER_KEY=your-fcm-server-key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - doyouremember-network
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules

  # MinIO para almacenamiento de objetos (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: doyouremember-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - doyouremember-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: doyouremember-frontend
    ports:
      - "3006:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_WS_URL=ws://localhost:3000
    depends_on:
      - api-gateway
    networks:
      - doyouremember-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: doyouremember-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - doyouremember-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:

networks:
  doyouremember-network:
    driver: bridge
